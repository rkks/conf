#  DETAILS: git global configuration to be used.
#  CREATED: 07/01/06 15:24:33 IST
# MODIFIED: 25/Apr/2018 18:01:05 PDT
#
#   AUTHOR: Ravikiran K.S., ravikirandotks@gmail.com
#  LICENCE: Copyright (c) 2013, Ravikiran K.S.
#
# Debug Options
# export GIT_TRACE=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_CURL_VERBOSE=2
# export GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_SETUP=2
# export GIT_SSH_COMMAND="ssh -vvv" GIT_TRACE_SHALLOW=2
# unset GIT_CURL_VERBOSE GIT_TRACE_PACK_ACCESS GIT_TRACE_SETUP GIT_TRACE_SHALLOW
# unset GIT_TRACE GIT_TRACE_PACKET GIT_TRACE_PACKFILE GIT_TRACE_PERFORMANCE
#
# TODO: Incorporate below commands after checking their outputs and usefullness
# git show --pretty="" --name-only bd61ad98    
# git diff-tree --no-commit-id --name-only -r bd61ad98
# git ls-tree --name-only -r <commit-ish>
# git diff-tree --no-commit-id --name-only -r <commit-ish>
# git show --stat --oneline HEAD
# git show --stat --oneline b24f5fb
# git show --stat --oneline HEAD^^..HEAD
# git show --name-only --oneline HEAD
# git show --name-only --oneline b24f5fb
# git show --name-only --oneline HEAD^^..HEAD
# git log --name-only
# git diff --name-only <sha>^ <sha>
# git diff --name-status <sha>^ <sha>
# git whatchanged <sha>

[diff]
    color = auto
    rename = copy
    algorithm = patience
#    tool = mydiff

#[difftool "mydiff"]
#    cmd = diff -Nwup $LOCAL $REMOTE

[gc]
    auto = 1

[grep]
    extendedRegexp = true

[merge]
    summary = true
    tool = vimdiff
    conflictstyle = diff3

[mergetool]
    prompt = false

[pager]
    color = true

[status]
    color = auto

[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto
    pager = true

[alias]
    caa = commit -a --amend -c HEAD                 # amend last commit and put current staged changes into it
    cia = commit -a                                 # commit/checkin everything. Add -S option for signing
    coa = !git checkout -- .                        # undo all changes in current directory
    cmd = !git config -l | grep alias | cut -c 7-   # show all git aliases. 'config --get-regexp alias' gives no-color output
    conb= checkout -b                               # checkout to a new branch
    dir = diff -p -W --stat=80 --no-prefix -r HEAD  # show changes from last commit in files tracked: staged+unstaged. gnu-diff style
    chk = apply -v -p0 --ignore-whitespace --check  # check if patch file is fine. Assumes diff with --no-prefix option, gnu-diff style.
    pat = apply -v -p0 --ignore-whitespace          # apply the patch. Assumes diff generated with --no-prefix option
    rev = !bash -c 'rd=rev_$RANDOM.diff && git dir >> $rd && git pat -R $rd && echo \"Reversed diff in $rd\" && unset rd'  # reverse the patch.

    create  = !bash -c 'git init && cp -f ~/conf/gitattributes .gitattributes && git add . && git commit -m \"First commit\"'  # init git repo
    amend   = commit --amend            # fix last commit
    diffstat= diff --stat -r HEAD       # show summary of all changes from last commit
    chnglog = log --pretty=format:\" * %s\"     # Display commits summary
    hist    = log --date=short --pretty=format:\"%h %ad | %s %d [%cn]\" --graph # history (date=local doesn't help)
    rmpriv  = clean -df                 # delete untracked private files in repo
    taglist = tag -l                    # show commit messages on tag list
    unadd   = reset HEAD                # un-add files from tracking index (still uncommitted new files)
    pullb   = "!f(){ git pull $@ && return || git mergetool; }; f"      # automagically invokes vimdiff if conflicts seen
    mergeb  = "!f(){ git merge $@ && return || git mergetool; }; f"     # automagically invokes vimdiff if conflicts seen
    rebaseb = "!f(){ git rebase $@ && return || git mergetool; }; f"    # automagically invokes vimdiff if conflicts seen
    brclean = "!f(){ git branch --merged ${1-master} | grep -v \"${1-master}$\" | xargs -r git branch -d; }; f" # delete merged local branches
    remoturl= "!f(){ git remote set-url ${2-origin} $1; return $?; }; f"    # change remote url for github repo from https to ssh

    # 'git add -u' - add deleted files, but not new files. 'git add .' - add current & new files, but not deleted files.
    aa = !sh -c 'git add --all . && git add -u'   # 'git aa' - add all deleted, modified, and new files.
    ai = add --interactive                  # superset of --patch. Can do not only chunk-by-chunk patch, but much more.
    ap = add --patch                        # stage commits chunk by chunk interactively
    br = branch -avv                        # all branches (local + remote/-r), verbose, recursive, along with commit msgs
    co = checkout                           # undo unstaged changes to a file <file> or to entire repo if input is '.'
    cb = checkout -b                        # <branch> - checkout branch & make it current branch
    cp = cherry-pick -x                     # copy a commit from another branch with source info
    gk = !gitk --all&
    gx = !gitx --all
    ig = status --ignored                   # ignored directory/files
    lg = log -W -p HEAD master              # timeline
    li = ls-files -o                        # show all ignored files
    ls = log --name-status -r --oneline     # list of files changed. ex, cvs update. --date=short --pretty=format:\"%H | %ad\"
    lu = log -u                             # show changes to a file.
    lx = log --all --graph --decorate --simplify-by-decoration  # graph
    rc = rebase --continue
    rs = rebase --skip
    ra = rebase --abort
    ru = remote -v                          # show all remote urls
    sh = show -M
    sm = show -m                            # show merge diff
    st = status                             # repo status
    wc = log --stat --no-merges HEAD        # list all commit filenames, stats; excluding merges. Enhanced whatchanged

    dump = cat-file -p
    type = cat-file -t
    undo = reset --hard HEAD                # DANGEROUS: Remove last commit, set up work tree exactly as it was before
    uncommit = reset --soft HEAD^           # Remove last commit, but do not touch the working tree (files untouched)
    uncommithard = git reset --hard @{u}    # Completely remove last commit, do not save anything.

    # 1. switching back to the master branch from my generic "dev" branch
    # 2. pulling from the remote
    # 3. switching back to "dev"
    # 4. rebasing "dev" against "master"
    # 5. switching back to "master"
    # 6. merging in the changes from "dev"
    # 7. and finally running git wtf to show me what all my branches look like after the merge before I do a push.
    publish = !git checkout master && git pull && git checkout dev && git rebase master && git checkout master && git merge dev && git wtf

[commit]
    template = ~/conf/template/gitcommit

[branch]
    autosetuprebase = always

[core]
    excludesfile = /home/ravikiranks/.gitignore
    editor = vim

[push]
    default = simple

[pull]
    rebase = true
